{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","username","href","website","CardList","monsters","map","key","SearchBox","handleChange","placeholder","type","onChange","App","string","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAIaA,G,YAAO,SAACC,GAAD,OACnB,yBAAKC,UAAU,kBACd,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACtB,gCAAML,EAAMI,QAAQE,KAApB,KACA,+BAAI,yCAAJ,IAAuBN,EAAMI,QAAQG,MAArC,KACA,+BAAI,0CAAJ,IAAwBP,EAAMI,QAAQI,SAAtC,KACA,+BAAI,yCAAJ,IAAsB,uBAAGC,KAAI,sBAAiBT,EAAMI,QAAQM,UAAtC,IAAmDV,EAAMI,QAAQM,QAAjE,KAAtB,QCJWC,EAAW,SAACX,GAAD,OACvB,yBAAKC,UAAU,aAEbD,EAAMY,SAASC,KAAI,SAAAT,GAAO,OACzB,kBAAC,EAAD,CAAMU,IAAKV,EAAQC,GAAID,QAASA,SCNvBW,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,YAAjB,OACvB,2BACChB,UAAU,SACViB,KAAK,SACLD,YAAaA,EACbE,SAAUH,MC+FEI,G,kBAvCb,aAAe,IAAD,8BACZ,+CASFJ,aAAe,SAAAK,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAOG,OAAOC,SAR3C,EAAKC,MAAQ,CACXd,SAAU,GAEVW,YAAa,IANH,E,iFAcO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAGjC,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YAEZU,EAAmBrB,EAASsB,QAAO,SAAA9B,GAAO,OAC9CA,EAAQE,KAAK6B,cAAcC,SAASb,EAAYY,kBAElD,OACE,yBAAKlC,UAAU,OACb,kDACA,kBAAC,EAAD,CACEe,aAAcgB,KAAKhB,aACnBC,YAAY,oBAEd,kBAAC,EAAD,CAAUL,SAAUqB,S,GAlCVI,cCpDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.cc27c824.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = (props) => (\n\t<div className='card-container'>\n\t\t<img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set1`}/>\n\t\t<h2> {props.monster.name} </h2>\n\t\t<p> <b> Contact: </b> {props.monster.email} </p>\n\t\t<p> <b> Username: </b> {props.monster.username} </p> \n\t\t<p> <b> Website: </b> <a href={`https://www.${props.monster.website}`}> {props.monster.website} </a> </p>\n\t</div>\n)","import React from 'react';\n\nimport './card-list.styles.css'; // Makes things beautiful\n\nimport { Card } from '../card/card.component.jsx';\n\nexport const CardList = (props) => (\n\t<div className=\"card-list\"> \n\t\t{\n\t\t\tprops.monsters.map(monster => (\n\t\t\t\t<Card key={monster.id} monster={monster}/>\n\t\t\t))\n\t\t}\n\t</div>\n)","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ handleChange, placeholder }) => (\n\t\t<input\n\t\t\tclassName=\"search\"\n\t\t\ttype='search'\n\t\t\tplaceholder={placeholder}\n\t\t\tonChange={handleChange}\n        />\n)","import React, { Component } from 'react';\n\n//import logo from './logo.svg';\n\nimport { CardList } from './components/card-list/card-list.component.jsx';\n\nimport { SearchBox } from './components/search-box/search-box.component.jsx';\n\nimport './App.css';\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          <b> Hello There! </b>\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\n/*class App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      string: \"Hello There!\"\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            <b> {this.state.string} </b>\n          </p>\n          <button onClick={() => this.setState({ string: \"Willkommen\" })}> Change Text </button>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n*/\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n\n      searchField: ''\n    };\n  }\n\n  handleChange = string => {\n    this.setState({ searchField: string.target.value });\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users }))\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    \n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox\n          handleChange={this.handleChange}\n          placeholder=\"Search monsters\"\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}